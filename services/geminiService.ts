import { GoogleGenAI } from "@google/genai";
import { GeneratedImage } from "../App";

// Assume process.env.API_KEY is configured in the environment
const apiKey = process.env.API_KEY;
if (!apiKey) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey });

const STYLES = ['Photorealistic', 'Cinematic', 'High Detail', 'Portrait'];

const generateSingleImage = async (prompt: string, aspectRatio: string, style: string): Promise<GeneratedImage> => {
    const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: `${prompt}, ${style} style`,
        config: {
            numberOfImages: 1,
            outputMimeType: 'image/jpeg',
            aspectRatio: aspectRatio,
        },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
        const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
        return {
            imageUrl: `data:image/jpeg;base64,${base64ImageBytes}`,
            style: style
        };
    } else {
        throw new Error(`No image was generated by the API for style: ${style}.`);
    }
}

export const generateImages = async (prompt: string, aspectRatio: string): Promise<GeneratedImage[]> => {
    try {
        console.log(`Generating 4 images for prompt: "${prompt}" with aspect ratio: ${aspectRatio}`);
        
        const imagePromises = STYLES.map(style => generateSingleImage(prompt, aspectRatio, style));
        
        const results = await Promise.all(imagePromises);
        
        return results;

    } catch (err) {
        console.error("Error generating image with Gemini API:", err);
        // Provide a more user-friendly error message
        if (err instanceof Error) {
            throw new Error(`API Error: ${err.message}`);
        }
        throw new Error("An unexpected error occurred while contacting the API.");
    }
};