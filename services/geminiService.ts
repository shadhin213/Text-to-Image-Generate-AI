import { GoogleGenAI } from "@google/genai";

// Assume process.env.API_KEY is configured in the environment
const apiKey = process.env.API_KEY;
if (!apiKey) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey });

export const generateImage = async (prompt: string, aspectRatio: string): Promise<string> => {
    try {
        console.log(`Generating image for prompt: "${prompt}" with aspect ratio: ${aspectRatio}`);
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/jpeg',
              aspectRatio: aspectRatio,
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No images were generated by the API.");
        }

    // FIX: Renamed the catch block variable to 'err' to resolve 'Cannot find name 'error'' errors.
    } catch (err) {
        console.error("Error generating image with Gemini API:", err);
        // Provide a more user-friendly error message
        if (err instanceof Error) {
            throw new Error(`API Error: ${err.message}`);
        }
        throw new Error("An unexpected error occurred while contacting the API.");
    }
};
